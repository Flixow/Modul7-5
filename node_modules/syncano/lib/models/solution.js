'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SolutionQuerySet = (0, _stampit2.default)().compose(_querySet.BaseQuerySet, _querySet.Get, _querySet.Create, _querySet.List, _querySet.Delete, _querySet.Update).methods({
  star: function star() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'star';

    return this;
  },
  unstar: function unstar() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'unstar';

    return this;
  },
  getVersions: function getVersions() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'GET';
    this.endpoint = 'versions';

    return this;
  },
  createVersion: function createVersion() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = payload;
    this.method = 'POST';
    this.endpoint = 'versions';

    return this;
  },
  getVersion: function getVersion() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'GET';
    this.endpoint = 'versionDetail';

    return this;
  },
  installVersion: function installVersion() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.payload = payload;
    this.endpoint = 'versionInstall';

    return this;
  },
  createVersionFromInstance: function createVersionFromInstance() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.payload = payload;
    this.endpoint = 'createFromInstance';

    return this;
  }
});

var SolutionMeta = (0, _base.Meta)({
  name: 'solution',
  pluralName: 'solutions',
  endpoints: {
    'list': {
      'methods': ['get'],
      'path': '/v1.1/marketplace/solutions/'
    },
    'detail': {
      'methods': ['get', 'post', 'patch', 'put', 'delete'],
      'path': '/v1.1/marketplace/solutions/{id}/'
    },
    'star': {
      'methods': ['post'],
      'path': '/v1.1/marketplace/solutions/{id}/star/'
    },
    'unstar': {
      'methods': ['post'],
      'path': '/v1.1/marketplace/solutions/{id}/unstar/'
    },
    'versions': {
      'methods': ['post', 'get'],
      'path': '/v1.1/marketplace/solutions/{id}/versions/'
    },
    'createFromInstance': {
      'methods': ['post', 'get'],
      'path': '/v1.1/marketplace/solutions/{id}/versions/create_from_instance/'
    },
    'versionDetail': {
      'methods': ['get'],
      'path': '/v1.1/marketplace/solutions/{id}/versions/{version_id}/'
    },
    'versionInstall': {
      'methods': ['post'],
      'path': '/v1.1/marketplace/solutions/{id}/versions/{version_id}/install/'
    }
  }
});

var SolutionConstraints = {
  label: {
    presence: true,
    string: true
  },
  description: {
    string: true
  },
  metadata: {
    object: true
  },
  public: {
    boolean: true
  }
};

/**
 * OO wrapper around Invoice.
 * @constructor
 * @type {Invoice}

 * @property {String} status
 * @property {Array} items
 * @property {String} period
 * @property {String} amount
 * @property {Number} id
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var Solution = (0, _stampit2.default)().compose(_base.Model).setQuerySet(SolutionQuerySet).setMeta(SolutionMeta).setConstraints(SolutionConstraints).methods({
  star: function star() {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('star', this);

    return this.makeRequest('POST', path);
  },
  unstar: function unstar() {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('unstar', this);

    return this.makeRequest('POST', path);
  },
  getVersions: function getVersions() {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('versions', this);

    return this.makeRequest('GET', path);
  },
  getVersion: function getVersion(version_id) {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('versionDetail', (0, _assign3.default)({}, this, { version_id: version_id }));

    return this.makeRequest('GET', path);
  },
  installVersion: function installVersion(version_id) {
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('versionInstall', (0, _assign3.default)({}, this, { version_id: version_id }));

    return this.makeRequest('POST', path, { payload: payload });
  },
  createVersion: function createVersion() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('versions', this);

    return this.makeRequest('POST', path, { payload: payload });
  },
  createVersionFromInstance: function createVersionFromInstance() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('createFromInstance', this);

    return this.makeRequest('POST', path, { payload: payload });
  }
});

exports.default = Solution;
module.exports = exports['default'];